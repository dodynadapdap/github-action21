name: Docker Image CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14.x'
    - run: npm ci
    - run: npm run build
    - run: npm test

  dockerize:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build and push Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        docker build -t $DOCKER_USERNAME/github-action21:${{ github.sha }} .
        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        docker push $DOCKER_USERNAME/github-action21:${{ github.sha }}

  deploy-staging:
    needs: dockerize
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to Staging
      env:
        DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/github-action21:${{ github.sha }}
        HOST: ${{ secrets.STAGING_HOST }}
        USER: ${{ secrets.STAGING_USER }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "$SSH_PRIVATE_KEY" > keyfile
        chmod 600 keyfile
        ssh -i keyfile -o StrictHostKeyChecking=no $USER@$HOST "
          docker pull $DOCKER_IMAGE &&
          docker stop frontend-app || true &&
          docker rm frontend-app || true &&
          docker run -d --name frontend-app -p 80:80 $DOCKER_IMAGE
        "

  deploy-production:
    needs: dockerize
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to Production
      env:
        DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/github-action21:${{ github.sha }}
        HOST: ${{ secrets.PRODUCTION_HOST }}
        USER: ${{ secrets.PRODUCTION_USER }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        echo "$SSH_PRIVATE_KEY" > keyfile
        chmod 600 keyfile
        ssh -i keyfile -o StrictHostKeyChecking=no $USER@$HOST "
          docker pull $DOCKER_IMAGE &&
          docker stop frontend-app || true &&
          docker rm frontend-app || true &&
          docker run -d --name frontend-app -p 80:80 $DOCKER_IMAGE
        "

  notify:
    needs: [deploy-staging, deploy-production]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Discord notification
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      uses: Ilshidur/action-discord@master
      with:
        args: 'The project has been deployed to ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}.'
